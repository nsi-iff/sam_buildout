#!/usr/bin/env python
# coding: utf-8

import txredisapi
import cyclone.web
from twisted.application import service, internet
from twisted.python.logfile import DailyLogFile
from twisted.python.log import ILogObserver, FileLogObserver
from nsisam.http import HttpHandler, FileHandler
from nsisam.auth import Authentication
from ConfigParser import RawConfigParser

CONF = '${conf-path}'
DB_FILE = '${db-file}'
FILE_PATH = '${file-path}'

def get_storage(conf):
    config = RawConfigParser()
    config.read(CONF)
    section_name = 'redis_server_list'
    address_list = [config.get(section_name, opt) for opt in config.options(section_name)]
    redis_shard = txredisapi.lazyShardedConnectionPool(address_list)
    return redis_shard

def get_authenticator(conf):
    return Authentication(DB_FILE)

class SAM(cyclone.web.Application):

    def __init__(self):
        handlers = [
            (r"/", HttpHandler),
            (r"/file/(.+)", FileHandler),
        ]

        settings = {
            "db": get_storage(CONF),
            "auth": get_authenticator(CONF),
            "file_path": FILE_PATH,
        }

        cyclone.web.Application.__init__(self, handlers, debug=True, **settings)

logfile = DailyLogFile("sam.log", "${buildout:log-directory}")
application = service.Application("SAM")
application.setComponent(ILogObserver, FileLogObserver(logfile).emit)
srv = internet.TCPServer(${port}, SAM(), interface='${host}')
srv.setServiceParent(application)
